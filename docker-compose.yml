version: '3.8'

services:
  nginx_proxy:
    depends_on:
      client:
        condition: service_completed_successfully
      employees:
        condition: service_healthy
#      ml-searcher:
#        condition: service_healthy
      backend-for-frontend:
        condition: service_healthy
    build:
      dockerfile: Dockerfile
      context: ./nginx
    volumes:
      - ./client/dist:/usr/share/nginx/html
    ports:
      - "80:80"
    networks:
      - mts_network

  backend-for-frontend:
    build:
      dockerfile: ./Dockerfile
      context: ./backend-for-frontend
    env_file:
      - ./environment/.backend-for-frontend.env
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/api/healthcheck || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mts_network 

  employees:
    build:
      dockerfile: ./Dockerfile
      context: ./employees
    env_file:
      - ./environment/.employees.env
    depends_on:
      postgres_employees:
        condition: service_healthy
    volumes:
      - ./employees/alembic/versions:/app/alembic/versions
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8082/api/healthcheck || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mts_network

  postgres_employees:
    image: postgres:13
    env_file:
      - ./environment/.database.env
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mts_network

  ml-searcher:
    build:
      dockerfile: ./Dockerfile
      context: ./ml-searcher
    env_file:
      - ./environment/.ml-searcher.env
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/api/healthcheck || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mts_network

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
    command: npm run build
    volumes:
      - ./client:/app
      - /app/node_modules

volumes:
  db_data:

networks:
  mts_network:
    driver: bridge
